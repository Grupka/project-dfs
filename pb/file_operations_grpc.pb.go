// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FileOperationsManagerClient is the client API for FileOperationsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileOperationsManagerClient interface {
	Initialize(ctx context.Context, in *InitializeArgs, opts ...grpc.CallOption) (*InitializeResult, error)
	CreateFile(ctx context.Context, in *CreateFileArgs, opts ...grpc.CallOption) (*CreateFileResult, error)
	ReadFile(ctx context.Context, in *ReadFileArgs, opts ...grpc.CallOption) (*ReadFileResult, error)
	WriteFile(ctx context.Context, in *WriteFileArgs, opts ...grpc.CallOption) (*WriteFileResult, error)
	DeleteFile(ctx context.Context, in *DeleteFileArgs, opts ...grpc.CallOption) (*DeleteFileResult, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoArgs, opts ...grpc.CallOption) (*GetFileInfoResult, error)
	CopyFile(ctx context.Context, in *CopyFileArgs, opts ...grpc.CallOption) (*CopyFileResult, error)
	MoveFile(ctx context.Context, in *MoveFileArgs, opts ...grpc.CallOption) (*MoveFileResult, error)
	// cd analog. Client-only thing.
	// rpc OpenDirectory(OpenDirectoryArgs) returns (OpenDirectoryResult) {};
	ReadDirectory(ctx context.Context, in *ReadDirectoryArgs, opts ...grpc.CallOption) (*ReadDirectoryResult, error)
	MakeDirectory(ctx context.Context, in *MakeDirectoryArgs, opts ...grpc.CallOption) (*MakeDirectoryResult, error)
	DeleteDirectory(ctx context.Context, in *DeleteDirectoryArgs, opts ...grpc.CallOption) (*DeleteDirectoryResult, error)
}

type fileOperationsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileOperationsManagerClient(cc grpc.ClientConnInterface) FileOperationsManagerClient {
	return &fileOperationsManagerClient{cc}
}

func (c *fileOperationsManagerClient) Initialize(ctx context.Context, in *InitializeArgs, opts ...grpc.CallOption) (*InitializeResult, error) {
	out := new(InitializeResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) CreateFile(ctx context.Context, in *CreateFileArgs, opts ...grpc.CallOption) (*CreateFileResult, error) {
	out := new(CreateFileResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) ReadFile(ctx context.Context, in *ReadFileArgs, opts ...grpc.CallOption) (*ReadFileResult, error) {
	out := new(ReadFileResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) WriteFile(ctx context.Context, in *WriteFileArgs, opts ...grpc.CallOption) (*WriteFileResult, error) {
	out := new(WriteFileResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) DeleteFile(ctx context.Context, in *DeleteFileArgs, opts ...grpc.CallOption) (*DeleteFileResult, error) {
	out := new(DeleteFileResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) GetFileInfo(ctx context.Context, in *GetFileInfoArgs, opts ...grpc.CallOption) (*GetFileInfoResult, error) {
	out := new(GetFileInfoResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/GetFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) CopyFile(ctx context.Context, in *CopyFileArgs, opts ...grpc.CallOption) (*CopyFileResult, error) {
	out := new(CopyFileResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/CopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) MoveFile(ctx context.Context, in *MoveFileArgs, opts ...grpc.CallOption) (*MoveFileResult, error) {
	out := new(MoveFileResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/MoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) ReadDirectory(ctx context.Context, in *ReadDirectoryArgs, opts ...grpc.CallOption) (*ReadDirectoryResult, error) {
	out := new(ReadDirectoryResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/ReadDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) MakeDirectory(ctx context.Context, in *MakeDirectoryArgs, opts ...grpc.CallOption) (*MakeDirectoryResult, error) {
	out := new(MakeDirectoryResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/MakeDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileOperationsManagerClient) DeleteDirectory(ctx context.Context, in *DeleteDirectoryArgs, opts ...grpc.CallOption) (*DeleteDirectoryResult, error) {
	out := new(DeleteDirectoryResult)
	err := c.cc.Invoke(ctx, "/pb.FileOperationsManager/DeleteDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileOperationsManagerServer is the server API for FileOperationsManager service.
// All implementations must embed UnimplementedFileOperationsManagerServer
// for forward compatibility
type FileOperationsManagerServer interface {
	Initialize(context.Context, *InitializeArgs) (*InitializeResult, error)
	CreateFile(context.Context, *CreateFileArgs) (*CreateFileResult, error)
	ReadFile(context.Context, *ReadFileArgs) (*ReadFileResult, error)
	WriteFile(context.Context, *WriteFileArgs) (*WriteFileResult, error)
	DeleteFile(context.Context, *DeleteFileArgs) (*DeleteFileResult, error)
	GetFileInfo(context.Context, *GetFileInfoArgs) (*GetFileInfoResult, error)
	CopyFile(context.Context, *CopyFileArgs) (*CopyFileResult, error)
	MoveFile(context.Context, *MoveFileArgs) (*MoveFileResult, error)
	// cd analog. Client-only thing.
	// rpc OpenDirectory(OpenDirectoryArgs) returns (OpenDirectoryResult) {};
	ReadDirectory(context.Context, *ReadDirectoryArgs) (*ReadDirectoryResult, error)
	MakeDirectory(context.Context, *MakeDirectoryArgs) (*MakeDirectoryResult, error)
	DeleteDirectory(context.Context, *DeleteDirectoryArgs) (*DeleteDirectoryResult, error)
	mustEmbedUnimplementedFileOperationsManagerServer()
}

// UnimplementedFileOperationsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFileOperationsManagerServer struct {
}

func (UnimplementedFileOperationsManagerServer) Initialize(context.Context, *InitializeArgs) (*InitializeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedFileOperationsManagerServer) CreateFile(context.Context, *CreateFileArgs) (*CreateFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileOperationsManagerServer) ReadFile(context.Context, *ReadFileArgs) (*ReadFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFileOperationsManagerServer) WriteFile(context.Context, *WriteFileArgs) (*WriteFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedFileOperationsManagerServer) DeleteFile(context.Context, *DeleteFileArgs) (*DeleteFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileOperationsManagerServer) GetFileInfo(context.Context, *GetFileInfoArgs) (*GetFileInfoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFileOperationsManagerServer) CopyFile(context.Context, *CopyFileArgs) (*CopyFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFileOperationsManagerServer) MoveFile(context.Context, *MoveFileArgs) (*MoveFileResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedFileOperationsManagerServer) ReadDirectory(context.Context, *ReadDirectoryArgs) (*ReadDirectoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDirectory not implemented")
}
func (UnimplementedFileOperationsManagerServer) MakeDirectory(context.Context, *MakeDirectoryArgs) (*MakeDirectoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDirectory not implemented")
}
func (UnimplementedFileOperationsManagerServer) DeleteDirectory(context.Context, *DeleteDirectoryArgs) (*DeleteDirectoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirectory not implemented")
}
func (UnimplementedFileOperationsManagerServer) mustEmbedUnimplementedFileOperationsManagerServer() {}

// UnsafeFileOperationsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileOperationsManagerServer will
// result in compilation errors.
type UnsafeFileOperationsManagerServer interface {
	mustEmbedUnimplementedFileOperationsManagerServer()
}

func RegisterFileOperationsManagerServer(s *grpc.Server, srv FileOperationsManagerServer) {
	s.RegisterService(&_FileOperationsManager_serviceDesc, srv)
}

func _FileOperationsManager_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).Initialize(ctx, req.(*InitializeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).CreateFile(ctx, req.(*CreateFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).ReadFile(ctx, req.(*ReadFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).WriteFile(ctx, req.(*WriteFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).DeleteFile(ctx, req.(*DeleteFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/GetFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).GetFileInfo(ctx, req.(*GetFileInfoArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).CopyFile(ctx, req.(*CopyFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).MoveFile(ctx, req.(*MoveFileArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_ReadDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirectoryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).ReadDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/ReadDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).ReadDirectory(ctx, req.(*ReadDirectoryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_MakeDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDirectoryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).MakeDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/MakeDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).MakeDirectory(ctx, req.(*MakeDirectoryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileOperationsManager_DeleteDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirectoryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileOperationsManagerServer).DeleteDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileOperationsManager/DeleteDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileOperationsManagerServer).DeleteDirectory(ctx, req.(*DeleteDirectoryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileOperationsManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileOperationsManager",
	HandlerType: (*FileOperationsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _FileOperationsManager_Initialize_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FileOperationsManager_CreateFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _FileOperationsManager_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _FileOperationsManager_WriteFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileOperationsManager_DeleteFile_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FileOperationsManager_GetFileInfo_Handler,
		},
		{
			MethodName: "CopyFile",
			Handler:    _FileOperationsManager_CopyFile_Handler,
		},
		{
			MethodName: "MoveFile",
			Handler:    _FileOperationsManager_MoveFile_Handler,
		},
		{
			MethodName: "ReadDirectory",
			Handler:    _FileOperationsManager_ReadDirectory_Handler,
		},
		{
			MethodName: "MakeDirectory",
			Handler:    _FileOperationsManager_MakeDirectory_Handler,
		},
		{
			MethodName: "DeleteDirectory",
			Handler:    _FileOperationsManager_DeleteDirectory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_operations.proto",
}
