// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StorageAdditionClient is the client API for StorageAddition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageAdditionClient interface {
	AddStorage(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type storageAdditionClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageAdditionClient(cc grpc.ClientConnInterface) StorageAdditionClient {
	return &storageAdditionClient{cc}
}

func (c *storageAdditionClient) AddStorage(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/pb.StorageAddition/AddStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageAdditionServer is the server API for StorageAddition service.
// All implementations must embed UnimplementedStorageAdditionServer
// for forward compatibility
type StorageAdditionServer interface {
	AddStorage(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedStorageAdditionServer()
}

// UnimplementedStorageAdditionServer must be embedded to have forward compatible implementations.
type UnimplementedStorageAdditionServer struct {
}

func (UnimplementedStorageAdditionServer) AddStorage(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorage not implemented")
}
func (UnimplementedStorageAdditionServer) mustEmbedUnimplementedStorageAdditionServer() {}

// UnsafeStorageAdditionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageAdditionServer will
// result in compilation errors.
type UnsafeStorageAdditionServer interface {
	mustEmbedUnimplementedStorageAdditionServer()
}

func RegisterStorageAdditionServer(s *grpc.Server, srv StorageAdditionServer) {
	s.RegisterService(&_StorageAddition_serviceDesc, srv)
}

func _StorageAddition_AddStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAdditionServer).AddStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.StorageAddition/AddStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAdditionServer).AddStorage(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageAddition_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StorageAddition",
	HandlerType: (*StorageAdditionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStorage",
			Handler:    _StorageAddition_AddStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ss_addition.proto",
}
